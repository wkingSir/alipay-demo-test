@RequestMapping("/paysucccesszfb")
    public void paySuccessyb(HttpServletRequest request, HttpServletResponse response) throws Exception {
        // 获取支付宝信息
        Pay p = payService.findByPayType("11");

        // 设置商户号
        AlipayConfig.alipay_public_key = p.getPublicKey();
        // 设置商户秘钥
        AlipayConfig.charset = UTF_8;

        AlipayConfig.sign_type = RSA_2;

        //获取返回信息
        Map<String, String[]> requestMap = request.getParameterMap();
        Map<String, String> paramsMap = new HashMap<>();
        requestMap.forEach((key, values) -> {
            String strs = "";
            for(String value : values) {
                strs = strs + value;
            }
            System.out.println(("key值为"+key+"value为："+strs));
            paramsMap.put(key, strs);
        });

        // 获取支付宝的通知返回参数，可参考技术文档中页面跳转同步通知参数列表(以下仅供参考)//
        String outTradeNo = new String(request.getParameter(OUT_TRADE_NO).getBytes(ISO_8859_1), UTF_8);
        String  tradeNo = new String(request.getParameter(TRADE_NO).getBytes(ISO_8859_1), UTF_8);
        // 交易状态
        String tradeStatus = new String(request.getParameter("trade_status").getBytes(ISO_8859_1), UTF_8);

        if (AliPayUtil.checkSign(paramsMap)) {// 验证成功
            // ////////////////////////////////////////////////////////////////////////////////////////
            // 请在这里加上商户的业务逻辑程序代码

            // ——请根据您的业务逻辑来编写程序（以下代码仅作参考）——
            List<Long> orderIds = new ArrayList<>();
            if ("TRADE_FINISHED".equals(tradeStatus)) {
                // 判断该笔订单是否在商户网站中已经做过处理
                // 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                // 如果有做过处理，不执行商户的业务程序
                Order or = mobileStoreOrderMapper.getPayOrderByCode(outTradeNo);

                if (or == null){
                    List<OrderVo> orders= mobileStoreOrderMapper.getPayOrderByOldCodeNew(outTradeNo);
                    for (int i = 0; i<orders.size(); i++){
                        //查询订单对应的收款单
                        Receivables receivables = this.receivablesService.queryByOrderCode(orders.get(i).getOrderCode());
                        //判断该订单是否在配送中
                        if ("2".equals(orders.get(i).getOrderStatus())) {
                            //更新收款单状态--实退款
                            if (null != receivables) {
                                receivables.setTradeNo(tradeNo);
                                // 修改收款单订单支付状态为支付成功
                                receivables.setReceivablesTime(new Date());
                                this.receivablesService.updatePayStatus(receivables);
                            }
                            // 更新订单状态
                            orderService.payOrder(orders.get(i).getOrderId(),PayTypeConst.PAY_TYPE_ALI);
                        }
                    }
                }else{
                    //查询订单对应的收款单
                    Receivables receivables = this.receivablesService.queryByOrderCode(or.getOrderCode());
                    if ("2".equals(or.getOrderStatus())) {

                        //更新收款单状态--实退款
                        if (null != receivables) {
                            // 修改收款单订单支付状态为支付成功
                            receivables.setTradeNo(tradeNo);
                            receivables.setReceivablesTime(new Date());
                            this.receivablesService.updatePayStatus(receivables);
                        }
                        // 更新订单状态
                        orderService.payOrder(or.getOrderId(),PayTypeConst.PAY_TYPE_ALI);
                        if (null != receivables) {
                            //记录虚拟销售量更新参数
                            orderIds.add(or.getOrderId());
                        }
                    }
                }
                // System.out.println(SUCCESS); // 请不要修改或删除
                // 注意：
                // 退款日期超过可退款期限后（如三个月可退款），支付宝系统发送该交易状态通知
            } else if ("TRADE_SUCCESS".equals(tradeStatus)) {
                // 判断该笔订单是否在商户网站中已经做过处理
                // 如果没有做过处理，根据订单号（out_trade_no）在商户网站的订单系统中查到该笔订单的详细，并执行商户的业务程序
                // 如果有做过处理，不执行商户的业务程序
                Order or = mobileStoreOrderMapper.getPayOrderByCode(outTradeNo);
                if (or == null){
                    List<OrderVo> orders= mobileStoreOrderMapper.getPayOrderByOldCodeNew(outTradeNo);
                    for (int i = 0; i<orders.size(); i++){
                        //查询订单对应的收款单
                        Receivables receivables = this.receivablesService.queryByOrderCode(orders.get(i).getOrderCode());
                        //判断订单是否在配送中
                        if ("2".equals(orders.get(i).getOrderStatus())) {
                            //更新收款单状态--实退款
                            if (null != receivables) {
                                receivables.setTradeNo(tradeNo);
                                // 修改收款单订单支付状态为支付成功
                                receivables.setReceivablesTime(new Date());
                                this.receivablesService.updatePayStatus(receivables);
                            }
                            // 更新订单状态
                            orderService.payOrder(orders.get(i).getOrderId(),PayTypeConst.PAY_TYPE_ALI);
                            if (null != receivables) {
                                //记录虚拟销售量更新参数
                                orderIds.add(or.getOrderId());
                            }
                        }
                    }
                }else{
                    //查询订单对应的收款单
                   Receivables receivables = this.receivablesService.queryByOrderCode(or.getOrderCode());
                    if ("2".equals(or.getOrderStatus())) {
                        //更新收款单状态--实退款
                        if (null != receivables) {
                            receivables.setReceivablesTime(new Date());
                            // 修改收款单订单支付状态为支付成功
                            receivables.setTradeNo(tradeNo);
                            this.receivablesService.updatePayStatus(receivables);
                        }
                        // 更新订单状态
                        orderService.payOrder(or.getOrderId(),PayTypeConst.PAY_TYPE_ALI);
                        if (null != receivables) {
                            //记录虚拟销售量更新参数
                            orderIds.add(or.getOrderId());
                        }
                    }
                }
                sendSucess(response, SUCCESS);
                // 注意：
                // 付款完成后，支付宝系统发送该交易状态通知
            }
            //更新虚拟销售量
            if(!orderIds.isEmpty()) {
                orderService.batchOrderCombinedPay(orderIds,orderIds.size() > 1 ? 1 : 0);//1:合并支付，0：单个支付
                goodsSalesSetService.addFictitiousSalesCount(orderIds);
            }
            // ——请根据您的业务逻辑来编写程序（以上代码仅作参考）——
            // System.out.println(SUCCESS); // 请不要修改或删除
            // ////////////////////////////////////////////////////////////////////////////////////////
        } else {// 验证失败
            System.out.println("fail");
        }
    }
